{"version":3,"sources":["..\\tmp\\transpiled\\asNEAT.js","..\\tmp\\transpiled\\connection.js","..\\tmp\\transpiled\\network.js","..\\tmp\\transpiled\\nodes\\compressorNode.js","..\\tmp\\transpiled\\nodes\\convolverNode.js","..\\tmp\\transpiled\\nodes\\delayNode.js","..\\tmp\\transpiled\\nodes\\feedbackDelayNode.js","..\\tmp\\transpiled\\nodes\\filterNode.js","..\\tmp\\transpiled\\nodes\\gainNode.js","..\\tmp\\transpiled\\nodes\\node.js","..\\tmp\\transpiled\\nodes\\noteOscillatorNode.js","..\\tmp\\transpiled\\nodes\\oscillatorNode.js","..\\tmp\\transpiled\\nodes\\outNode.js","..\\tmp\\transpiled\\nodes\\pannerNode.js","..\\tmp\\transpiled\\population.js","..\\tmp\\transpiled\\utils.js"],"names":[],"mappings":"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","file":"asNEAT.js","sourcesContent":["define(\"asNEAT/asNEAT\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    \r\n    var ns = {};\r\n    \r\n    window.AudioContext = window.AudioContext ||\r\n      window.webkitAudioContext ||\r\n      function() {this.supported = false;};\r\n    ns.context = new window.AudioContext();\r\n    if (typeof ns.context.supported === 'undefined')\r\n      ns.context.supported = true;\r\n    \r\n    window.OfflineAudioContext = window.OfflineAudioContext ||\r\n      window.webkitOfflineAudioContext ||\r\n      function() {this.supported = false;};\r\n    ns.offlineContext = new window.OfflineAudioContext(2, 10 * 44100, 44100);\r\n    if (typeof ns.offlineContext.supported === 'undefined')\r\n      ns.offlineContext.supported = true;\r\n    \r\n    // only create the gain if context is found\r\n    // (helps on tests)\r\n    if (ns.context.supported) {\r\n      ns.globalGain = ns.context.createGain();\r\n      ns.globalGain.gain.value = 0.5;\r\n      ns.globalGain.connect(ns.context.destination);\r\n    }\r\n    \r\n    if (ns.offlineContext.supported) {\r\n      ns.offlineGlobalGain = ns.offlineContext.createGain();\r\n      ns.offlineGlobalGain.gain.value = 0.5;\r\n      ns.offlineGlobalGain.connect(ns.offlineContext.destination);\r\n    }\r\n    \r\n    // All the registered usable nodes\r\n    // TODO: Give weights for selection in mutation?\r\n    ns.nodeTypes = [\r\n      'gainNode',\r\n      'filterNode',\r\n      'delayNode',\r\n      'feedbackDelayNode',\r\n      \r\n      //'pannerNode' // Implemented, but doesn't do much without other mutations\r\n      \r\n      'compressorNode',\r\n      'convolverNode'\r\n    \r\n      //wave shaper node? // like distortion? eq?\r\n    ];\r\n    \r\n    __exports__[\"default\"] = ns;\n  });","define(\"asNEAT/connection\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    \r\n    var Utils = require('asNEAT/utils')['default'],\r\n        log = Utils.log,\r\n        asNEAT = require('asNEAT/asNEAT')['default'],\r\n        context = asNEAT.context,\r\n        offlineContext = asNEAT.offlineContext,\r\n        name = \"Connection\";\r\n    \r\n    // TODO: Different kinds of connections?\r\n    var Connection = function(parameters) {\r\n      Utils.extend(this, this.defaultParameters, parameters);\r\n      this.gainNode = null;\r\n      this.hasChanged = false;\r\n      // Only generate a new id if one isn't given in the parameters\r\n      if (parameters && typeof parameters.id !== 'undefined')\r\n        this.id = parameters.id;\r\n      else\r\n        this.id = Utils.createHash();\r\n    };\r\n    \r\n    Connection.prototype.name = name;\r\n    Connection.prototype.defaultParameters = {\r\n      sourceNode: null,\r\n      targetNode: null,\r\n      \r\n      // null if connecting to audio input of targetNode\r\n      targetParameter: null,\r\n      targetParameterNodeName: \"node\",\r\n    \r\n      weight: 1.0,\r\n      enabled: true,\r\n    \r\n      mutationDeltaChance: 0.8,\r\n      mutationDelta: {min: -0.2, max: 0.2},\r\n      randomMutationRange: {min: 0.1, max: 1.5},\r\n      discreteMutation: false\r\n    };\r\n    \r\n    /**\r\n      @param clonedsourceNode {Node} (optional)\r\n      @param clonedtargetNode {Node} (optional)\r\n    */\r\n    Connection.prototype.clone = function(clonedsourceNode, clonedtargetNode) {\r\n      var sourceNode = clonedsourceNode || this.sourceNode.clone();\r\n      var targetNode = clonedtargetNode || this.targetNode.clone();\r\n      return new Connection({\r\n        id: this.id,\r\n        sourceNode: sourceNode,\r\n        targetNode: targetNode,\r\n        targetParameter: this.targetParameter,\r\n        targetParameterNodeName: this.targetParameterNodeName,\r\n        weight: this.weight,\r\n        enabled: this.enabled,\r\n        mutationDeltaChance: this.mutationDeltaChance,\r\n        mutationDelta: _.clone(this.mutationDelta),\r\n        randomMutationRange: _.clone(this.randomMutationRange),\r\n        discreteMutation: this.discreteMutation\r\n      });\r\n    };\r\n    Connection.prototype.connect = function() {\r\n      connect.call(this, context);\r\n    };\r\n    Connection.prototype.offlineConnect = function() {\r\n      connect.call(this, offlineContext, \"offline\");\r\n    };\r\n    \r\n    function connect(context, accessorPrefix) {\r\n      if (!this.enabled) return;\r\n    \r\n      accessorPrefix = accessorPrefix || \"\";\r\n      var accessor = accessorPrefix + (accessorPrefix ? \"Node\" : \"node\");\r\n    \r\n      // The gainNode is what carries the connection's \r\n      // weight attribute\r\n      this.gainNode = context.createGain();\r\n      this.gainNode.gain.value = this.weight;\r\n      this.sourceNode[accessor].connect(this.gainNode);\r\n    \r\n      var param = this.targetParameter;\r\n      if (param === null)\r\n        this.gainNode.connect(this.targetNode[accessor]);\r\n      else {\r\n        var nodeName = this.targetParameterNodeName ? this.targetParameterNodeName : \"node\";\r\n        accessor = accessorPrefix + (accessorPrefix ? Utils.upperCaseFirstLetter(nodeName) : nodeName);\r\n        this.gainNode.connect(this.targetNode[accessor][param]);\r\n      }\r\n    \r\n      return this;\r\n    }\r\n    \r\n    Connection.prototype.disable = function() {\r\n      this.enabled = false;\r\n      return this;\r\n    };\r\n    \r\n    Connection.prototype.mutate = function() {\r\n      var mutationInfo = Utils.mutateParameter({\r\n        obj: this,\r\n        parameter: 'weight',\r\n        mutationDeltaChance: this.mutationDeltaChance,\r\n        mutationDelta: this.mutationDelta,\r\n        randomMutationRange: this.randomMutationRange\r\n      });\r\n      return this;\r\n    };\r\n    \r\n    Connection.prototype.getParameters = function() {\r\n      return {\r\n        name: name,\r\n        id: this.id,\r\n        weight: this.weight,\r\n        enabled: this.enabled,\r\n        sourceNode: this.sourceNode.name,\r\n        targetNode: this.targetNode.name,\r\n        targetParameter: this.targetParameter\r\n      };\r\n    };\r\n    \r\n    Connection.prototype.toString = function() {\r\n      return (this.enabled? \"\" : \"*\") +\r\n              \"connection(\"+this.weight.toFixed(2)+\")(\"+\r\n              this.sourceNode.id+\" --> \"+this.targetNode.id+\r\n              (this.targetParameter ? (\": \"+this.targetParameter) : \"\" )+\")\";\r\n    };\r\n    \r\n    Connection.prototype.toJSON = function() {\r\n      var json = {\r\n        id: this.id,\r\n        sourceNode: this.sourceNode.id,\r\n        targetNode: this.targetNode.id,\r\n        targetParameter: this.targetParameter,\r\n        targetParameterNodeName: this.targetParameterNodeName,\r\n        weight: this.weight,\r\n        enabled: this.enabled\r\n      };\r\n      return JSON.stringify(json);\r\n    };\r\n    \r\n    __exports__[\"default\"] = Connection;\n  });","define(\"asNEAT/network\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    \r\n    var Utils = require('asNEAT/utils')['default'],\r\n        NoteOscillatorNode = require('asNEAT/nodes/noteOscillatorNode')['default'],\r\n        OscillatorNode = require('asNEAT/nodes/oscillatorNode')['default'],\r\n        OutNode = require('asNEAT/nodes/outNode')['default'],\r\n        Connection = require('asNEAT/connection')['default'],\r\n        asNEAT = require('asNEAT/asNEAT')['default'],\r\n        offlineContext = asNEAT.offlineContext,\r\n        nodeTypes = asNEAT.nodeTypes,\r\n        log = Utils.log,\r\n        name = \"Network\",\r\n        globalOutNode = new OutNode();\r\n    \r\n    var Network = function(parameters) {\r\n      Utils.extend(this, this.defaultParameters, parameters);\r\n    \r\n      // {objectsChanged [], changeDescription string}\r\n      this.lastMutation = null;\r\n    \r\n      if (this.nodes.length===0) {\r\n        // Create a basic onscillator without any offset to start\r\n        var osc = NoteOscillatorNode.random();\r\n        osc.noteOffset = 0;\r\n        this.nodes.push(globalOutNode);\r\n        this.nodes.push(osc);\r\n      }\r\n      if (this.connections.length===0) {\r\n        this.connections.push(new Connection({\r\n          sourceNode: this.nodes[1],\r\n          targetNode: this.nodes[0],\r\n          weight: 0.5\r\n        }));\r\n      }\r\n    \r\n      // Only generate a new id if one isn't given in the parameters\r\n      if (parameters && typeof parameters.id !== 'undefined')\r\n        this.id = parameters.id;\r\n      else\r\n        this.id = Utils.createHash();\r\n    };\r\n    \r\n    Network.prototype.name = name;\r\n    Network.prototype.defaultParameters = {\r\n      nodes: [],\r\n      connections: [],\r\n      connectionMutationRate: 0.1,\r\n      nodeMutationRate: 0.1,\r\n      // percentage of addOscillatorMutations will\r\n      // generate a node for fm, as opposed to strict audio output\r\n      addOscillatorFMMutationRate: 0.5,\r\n    \r\n      // Percentage of addConnectionMutation will generate a connection\r\n      // for fm, as opposed to a strict audio connection\r\n      addConnectionFMMutationRate: 0.5\r\n    };\r\n    /*\r\n      Creates a deep clone of this network\r\n     */\r\n    Network.prototype.clone = function() {\r\n    \r\n      // Clone each node\r\n      var clonedNodes = [];\r\n      _.forEach(this.nodes, function(node) {\r\n        clonedNodes.push(node.clone());\r\n      });\r\n    \r\n      // Clone each connection\r\n      var clonedConnections = [];\r\n      _.forEach(this.connections, function(connection) {\r\n        var clonedsourceNode = _.find(clonedNodes, {id: connection.sourceNode.id});\r\n        var clonedtargetNode = _.find(clonedNodes, {id: connection.targetNode.id});\r\n        clonedConnections.push(connection.clone(clonedsourceNode, clonedtargetNode));\r\n      });\r\n    \r\n      return new Network({\r\n        nodes: clonedNodes,\r\n        connections: clonedConnections,\r\n        connectionMutationRate: this.connectionMutationRate,\r\n        nodeMutationRate: this.nodeMutationRate\r\n      });\r\n    };\r\n    /**\r\n      Creates a child network from this and the passed in otherNetwork\r\n    */\r\n    Network.prototype.crossWith = function(otherNetwork) {\r\n      var tNodes = this.nodes,\r\n          oNodes = otherNetwork.nodes,\r\n          tConnections = this.connections,\r\n          oConnections = otherNetwork.connections,\r\n          nodes = [], connections = [],\r\n          newNetwork, tIndexes;\r\n    \r\n      function addNode(node, i) {\r\n        var newNode = node.clone();\r\n        if (typeof i === 'undefined') {\r\n          nodes.push(newNode);\r\n          tIndexes[node.id]=nodes.length-1;\r\n        }\r\n        else\r\n          nodes[i] = newNode;\r\n      }\r\n      function addConnection(connection, i) {\r\n        var source = _.find(nodes, {id: connection.sourceNode.id}),\r\n            target = _.find(nodes, {id: connection.targetNode.id}),\r\n            newConn = connection.clone(source, target);\r\n        if (typeof i === 'undefined') {\r\n          connections.push(newConn);\r\n          tIndexes[connection.id]=connections.length-1;\r\n        }\r\n        else\r\n          connections[i] = newConn;\r\n      }\r\n    \r\n      // Add all of tElements first, then loop through and add\r\n      // any oElements not in tElements or 50/50 chance.\r\n      // This destroys 'creation order' of the nodes/connections\r\n      // but doesn't matter\r\n      function addElements(tElements, oElements, addHandler) {\r\n        tIndexes = {};\r\n        _.forEach(tElements, function(element) {\r\n          addHandler(element);\r\n        });\r\n        _.forEach(oElements, function(element) {\r\n          var i = tIndexes[element.id];\r\n          // not found, then just push it in\r\n          if (typeof i === \"undefined\")\r\n            addHandler(element);\r\n          // otherwise, 50/50 of using oNode\r\n          else if (Utils.randomBool())\r\n            addHandler(element, i);\r\n        });\r\n      }\r\n    \r\n      addElements(tNodes, oNodes, addNode);\r\n      addElements(tConnections, oConnections, addConnection);\r\n    \r\n      newNetwork = new Network({\r\n        nodes: nodes,\r\n        connections: connections,\r\n      });\r\n      newNetwork.lastMutation = {\r\n        // TODO: Highlight changed objects? maybe add in blue for first parent, red for other?\r\n        objectsChanged: [],\r\n        changeDescription: \"Crossed instruments \"+this.id+\" & \"+otherNetwork.id\r\n      };\r\n      updateObjectsInMutation(newNetwork.lastMutation);\r\n    \r\n      return newNetwork;\r\n    };\r\n    Network.prototype.play = function() {\r\n      playPrep.call(this);\r\n    \r\n      // play the oscillators\r\n      _.forEach(this.nodes, function(node) {\r\n        if (node.play)\r\n          node.play();\r\n      });\r\n    \r\n      return this;\r\n    };\r\n    \r\n    /**\r\n      Plays the network until the return handler is called\r\n      @return function stop\r\n    **/\r\n    Network.prototype.playHold = function() {\r\n      playPrep.call(this);\r\n    \r\n      var stopHandlers = [];\r\n    \r\n      // play the oscillators\r\n      _.forEach(this.nodes, function(node) {\r\n        if (node.playHold)\r\n          stopHandlers.push(node.playHold());\r\n      });\r\n    \r\n      return function stop() {\r\n        _.forEach(stopHandlers, function(handler) {\r\n          handler();\r\n        });\r\n      };\r\n    };\r\n    \r\n    /**\r\n      @param callback function(AudioBuffer)\r\n    */\r\n    Network.prototype.offlinePlay = function(callback) {\r\n      playPrep.call(this, \"offlineRefresh\", \"offlineConnect\");\r\n      // play the offline oscillators\r\n      _.forEach(this.nodes, function(node) {\r\n        if (node.offlinePlay)\r\n          node.offlinePlay();\r\n      });\r\n    \r\n      offlineContext.oncomplete = function(e) {\r\n        callback(e.renderedBuffer);\r\n      };\r\n      // TODO: Change to promise once implemented in browsers\r\n      offlineContext.startRendering();\r\n    };\r\n    \r\n    function playPrep(refreshHandlerName, connectHandlerName) {\r\n      refreshHandlerName = refreshHandlerName || \"refresh\";\r\n      connectHandlerName = connectHandlerName || \"connect\";\r\n    \r\n      // refresh all the nodes since each can only play \r\n      // once (note: changing in the current webAudio draft)\r\n      _.forEach(this.nodes, function(node) {\r\n        node[refreshHandlerName]();\r\n      });\r\n    \r\n      // setup all the connections\r\n      _.forEach(this.connections, function(connection) {\r\n        connection[connectHandlerName]();\r\n      });\r\n    }\r\n    \r\n    /**\r\n      Randomly mutates the network based on weighted probabilities.\r\n      @note Each one updates lastMutation\r\n    */\r\n    Network.prototype.mutate = function() {\r\n      // TODO: Other mutations?\r\n      var mutations = [\r\n        {weight: 0.2, element: this.splitMutation},\r\n        {weight: 0.2, element: this.addOscillator},\r\n        {weight: 0.2, element: this.addConnection},\r\n        {weight: 0.2, element: this.mutateConnectionWeights},\r\n        {weight: 0.2, element: this.mutateNodeParameters}\r\n      ];\r\n    \r\n      // TODO: Check current generation for similar structural mutation\r\n      // and copy connection id/ids (innovation number)\r\n      var mutation = Utils.weightedSelection(mutations);\r\n      mutation.call(this);\r\n      \r\n      // Clear old changed objects\r\n      _.forEach(this.nodes, function(node) {\r\n        node.hasChanged = false;\r\n      });\r\n      _.forEach(this.connections, function(connection) {\r\n        connection.hasChanged = false;\r\n      });\r\n    \r\n      updateObjectsInMutation(this.lastMutation);\r\n    \r\n      return this;\r\n    };\r\n    \r\n    // Update newly changed objects\r\n    function updateObjectsInMutation(lastMutation) {\r\n      if (lastMutation == null)\r\n        throw \"no last mutation from mutate\";\r\n    \r\n      _.forEach(lastMutation.objectsChanged, function(objects) {\r\n        objects.hasChanged = true;\r\n      });\r\n    }\r\n    \r\n    /*\r\n      Randomly select a connection to split in two\r\n    */\r\n    Network.prototype.splitMutation = function() {\r\n      // Randomly select a connection\r\n      var connections = this.getEnabledConnections(),\r\n          connsLen = connections.length,\r\n          randomI = Utils.randomIndexIn(0, connsLen),\r\n          conn = connections[randomI],\r\n          targetNode = conn.targetNode,\r\n          typesLen = nodeTypes.length,\r\n          typesI = Utils.randomIndexIn(0, typesLen),\r\n          selectedType = nodeTypes[typesI],\r\n          Node = require('asNEAT/nodes/'+selectedType)['default'],\r\n          newNode, inConnection, outConnection, targetParameter,\r\n          targetParameterNodeName;\r\n    \r\n      // \"The new connection leading into the new node receives a weight of 1,\r\n      // and the new connection leading out receives the same weight as the old\r\n      // connection.\" ~ Stanley\r\n      newNode = Node.random();\r\n    \r\n      inConnection = new Connection({\r\n        sourceNode: conn.sourceNode,\r\n        targetNode: newNode,\r\n        weight: 1.0\r\n      });\r\n    \r\n      outConnection = new Connection({\r\n        sourceNode: newNode,\r\n        targetNode: targetNode,\r\n        targetParameter: conn.targetParameter,\r\n        targetParameterNodeName: conn.targetParameterNodeName,\r\n        weight: conn.weight,\r\n        mutationDelta: _.cloneDeep(targetNode.mutationDelta),\r\n        randomMutationRange: _.cloneDeep(targetNode.randomMutationRange)\r\n      });\r\n    \r\n      conn.disable();\r\n      this.nodes.push(newNode);\r\n      this.connections.push(inConnection);\r\n      this.connections.push(outConnection);\r\n    \r\n      log('splitting conn '+conn.toString()+' with '+newNode.toString());\r\n    \r\n      //{objectsChanged [], changeDescription string}\r\n      this.lastMutation = {\r\n        objectsChanged: [\r\n          newNode,\r\n          inConnection,\r\n          outConnection\r\n        ],\r\n    \r\n        changeDescription: \"Split Connection\"\r\n      };\r\n    \r\n      return this;\r\n    };\r\n    \r\n    /*\r\n      Adds a single oscillator and connects it to a random input\r\n      in one of the current nodes\r\n     */\r\n    Network.prototype.addOscillator = function() {\r\n      var oscillator, possibleTargets, target, connection;\r\n    \r\n      // Add FM Oscillator or audio oscillator\r\n      if (Utils.randomChance(this.addOscillatorFMMutationRate)) {\r\n        oscillator = OscillatorNode.random();\r\n    \r\n        // Pick random node that's connectable to connect to\r\n        possibleTargets = _.filter(this.nodes, function(node) {\r\n          return node.connectableParameters &&\r\n                 node.connectableParameters.length > 0;\r\n        });\r\n        target = Utils.randomElementIn(possibleTargets);\r\n        var targetParameter = Utils.randomElementIn(target.connectableParameters);\r\n        var ampMin = targetParameter.amplitudeScaling.min;\r\n        var ampMax = targetParameter.amplitudeScaling.max;\r\n    \r\n        connection = new Connection({\r\n          sourceNode: oscillator,\r\n          targetNode: target,\r\n          targetParameter: targetParameter.name,\r\n          targetParameterNodeName: targetParameter.nodeName,\r\n          weight: Utils.randomIn(ampMin, ampMax),\r\n          mutationDelta: {min: ampMin/12, max: ampMin/12},\r\n          randomMutationRange: {min: ampMin, max: ampMax}\r\n        });\r\n    \r\n        log('adding fm oscillator('+targetParameter.name+') '+oscillator.toString());\r\n      }\r\n      else {\r\n        oscillator = NoteOscillatorNode.random();\r\n        // Pick a random non oscillator node\r\n        possibleTargets = _.filter(this.nodes, function(node) {\r\n          return node.name !== \"OscillatorNode\" &&\r\n                 node.name !== \"NoteOscillatorNode\";\r\n        });\r\n        target = Utils.randomElementIn(possibleTargets);\r\n    \r\n        connection = new Connection({\r\n          sourceNode: oscillator,\r\n          targetNode: target,\r\n          weight: 0.5\r\n        });\r\n    \r\n        log('adding audio oscillator '+oscillator.toString());\r\n      }\r\n    \r\n      this.nodes.push(oscillator);\r\n      this.connections.push(connection);\r\n    \r\n      //{objectsChanged [], changeDescription string}\r\n      this.lastMutation = {\r\n        objectsChanged: [\r\n          oscillator,\r\n          connection\r\n        ],\r\n    \r\n        changeDescription: \"Added Oscillator\"\r\n      };\r\n    \r\n      return this;\r\n    };\r\n    \r\n    Network.prototype.addConnection = function() {\r\n      var usingFM = Utils.randomChance(this.addConnectionFMMutationRate);\r\n      var possibleConns = this.getPossibleNewConnections(usingFM);\r\n      if (possibleConns.length===0) {\r\n        log('no possible Connections');\r\n        this.lastMutation = {\r\n          objectsChanged: [],\r\n          changeDescription: \"No Mutation (No \"+(usingFM ? \"FM \":\"\")+\"connections to add)\"\r\n        };\r\n        return this;\r\n      }\r\n    \r\n      var newConnection = Utils.randomElementIn(possibleConns);\r\n      this.connections.push(newConnection);\r\n      log('new connection: '+newConnection.toString());\r\n    \r\n      //{objectsChanged [], changeDescription string}\r\n      this.lastMutation = {\r\n        objectsChanged: [\r\n          newConnection\r\n        ],\r\n        changeDescription: \"Added Connection\"\r\n      };\r\n    \r\n      return this;\r\n    };\r\n      Network.prototype.getPossibleNewConnections = function(usingFM) {\r\n        // TODO: Just build the potential connections when new nodes are added/removed?\r\n        //       perfomance hit when adding new nodes, but don't have to O(n^2) for adding a new connection.\r\n        //       Would have to regenerate on copy though\r\n    \r\n        // TODO: allow multiple connections to different parameters between same nodes for FM synthesis\r\n        var self = this,\r\n            connections = [];\r\n    \r\n        // Loop through all non output nodes\r\n        _.forEach(this.nodes, function(sourceNode) {\r\n          if (sourceNode.name===\"OutNode\") \r\n            return;\r\n          // Create possible connection if it (or its inverse)\r\n          // doesn't exist already\r\n          _.forEach(self.nodes, function(targetNode) {\r\n            if (usingFM && \r\n                (!targetNode.connectableParameters ||\r\n                 targetNode.connectableParameters.length === 0))\r\n              return;\r\n            if (!usingFM &&\r\n                (targetNode.name===\"OscillatorNode\" ||\r\n                 targetNode.name===\"NoteOscillatorNode\"))\r\n              return;\r\n            if (sourceNode===targetNode)\r\n              return;\r\n    \r\n            var connExists = _.find(self.connections, function(conn) {\r\n              return (conn.sourceNode === sourceNode &&\r\n                      conn.targetNode === targetNode) ||\r\n                     (conn.sourceNode === targetNode &&\r\n                      conn.targetNode === sourceNode);\r\n            });\r\n    \r\n            if (connExists)\r\n              return;\r\n    \r\n            if (usingFM) {\r\n              var targetParameter = Utils.randomElementIn(targetNode.connectableParameters);\r\n              var ampMin = targetParameter.amplitudeScaling.min;\r\n              var ampMax = targetParameter.amplitudeScaling.max;\r\n    \r\n              connections.push(new Connection({\r\n                sourceNode: sourceNode,\r\n                targetNode: targetNode,\r\n                targetParameter: targetParameter.name,\r\n                targetParameterNodeName: targetParameter.nodeName,\r\n                weight: Utils.randomIn(ampMin, ampMax),\r\n                mutationDelta: {min: ampMin/12, max: ampMin/12},\r\n                randomMutationRange: {min: ampMin, max: ampMax}\r\n              }));\r\n            }\r\n            else {\r\n              connections.push(new Connection({\r\n                sourceNode: sourceNode,\r\n                targetNode: targetNode,\r\n                // less than one to decrease risk of harsh feedback\r\n                weight: 0.5\r\n              }));          \r\n            }\r\n          });\r\n        });\r\n          \r\n        return connections;\r\n      };\r\n    \r\n    /*\r\n      For each connection, mutate based on the given probability\r\n      @param forceMutation {bool} (default: true) Makes at least one connection mutate\r\n    */\r\n    Network.prototype.mutateConnectionWeights = function(forceMutation) {\r\n      if (typeof(forceMutation)==='undefined') forceMutation = true;\r\n    \r\n      var mutationRate = this.connectionMutationRate,\r\n          anyMutations = false,\r\n          objectsChanged = [];\r\n      _.forEach(this.connections, function(conn) {\r\n        if (Utils.random() <= mutationRate) {\r\n          objectsChanged.push(conn.mutate());\r\n          anyMutations = true;\r\n        }\r\n      });\r\n    \r\n      // If no connections were mutated and forcing a mutation\r\n      // mutate a random one\r\n      if (!anyMutations && forceMutation) {\r\n        log('forcing weight mutation');\r\n        var conn = Utils.randomElementIn(this.connections);\r\n        objectsChanged.push(conn.mutate());\r\n      }\r\n    \r\n      //{objectsChanged [], changeDescription string}\r\n      this.lastMutation = {\r\n        objectsChanged: objectsChanged,\r\n        changeDescription: \"Mutated connection gain\"\r\n      };\r\n    \r\n      return this;\r\n    };\r\n    \r\n    Network.prototype.mutateNodeParameters = function(forceMutation) {\r\n      if (typeof(forceMutation)==='undefined') forceMutation = true;\r\n    \r\n      var mutationRate = this.nodeMutationRate,\r\n          anyMutations = false,\r\n          objectsChanged = [];\r\n      _.forEach(this.nodes, function(node) {\r\n        if (Utils.random() <= mutationRate) {\r\n          objectsChanged.push(node.mutate());\r\n          anyMutations = true;\r\n        }\r\n      });\r\n    \r\n      // If no nodes were mutated and forcing a mutation\r\n      // mutate a random one\r\n      if (!anyMutations && forceMutation) {\r\n        log('forcing node mutation');\r\n        var node = Utils.randomElementIn(this.nodes);\r\n        objectsChanged.push(node.mutate());\r\n      }\r\n      //{objectsChanged [], changeDescription string}\r\n      this.lastMutation = {\r\n        objectsChanged: objectsChanged,\r\n        changeDescription: \"Mutated Node Parameters\"\r\n      };\r\n    \r\n      return this;\r\n    };\r\n    \r\n    Network.prototype.getEnabledConnections = function() {\r\n      return _.filter(this.connections, 'enabled');\r\n    };\r\n    \r\n    Network.prototype.getNoteOscillatorNodes = function() {\r\n      return _.filter(this.nodes, {name: 'NoteOscillatorNode'});\r\n    };\r\n    Network.prototype.getOscillatorNodes = function() {\r\n      return _.filter(this.nodes, {name: 'OscillatorNode'});\r\n    };\r\n    \r\n    /**\r\n     Gets the non noteOscillator and oscillator nodes\r\n    */\r\n    Network.prototype.getOscillatorAndNoteOscillatorNodes = function() {\r\n      return _.filter(this.nodes, function(node) {\r\n        return node.name === 'OscillatorNode' ||\r\n               node.name === 'NoteOscillatorNode';\r\n      });\r\n    };\r\n    \r\n    Network.prototype.toString = function() {\r\n      var str = \"Nodes:<br>\";\r\n      _.forEach(this.nodes, function(ele) {\r\n        str+=ele.toString()+\"<br>\";\r\n      });\r\n    \r\n      str += \"<br>Connections:<br>\";\r\n      _.forEach(this.connections, function(ele) {\r\n        str+=ele.toString()+\"<br>\";\r\n      });\r\n    \r\n      return str;\r\n    };\r\n    \r\n    Network.prototype.toJSON = function() {\r\n      var json = {\r\n        id: this.id,\r\n        nodes: [],\r\n        connections: []\r\n      };\r\n      _.forEach(this.nodes, function(node) {\r\n        json.nodes.push(node.toJSON());\r\n      });\r\n      _.forEach(this.connections, function(connection) {\r\n        json.connections.push(connection.toJSON());\r\n      });\r\n      return JSON.stringify(json);\r\n    };\r\n    Network.createFromJSON = function(json) {\r\n      var obj = JSON.parse(json),\r\n          createdNodes = [],\r\n          createdConnections = [];\r\n    \r\n      _.forEach(obj.nodes, function(json) {\r\n        var nodeParams = JSON.parse(json),\r\n            type = Utils.lowerCaseFirstLetter(nodeParams.name),\r\n            Node = require('asNEAT/nodes/'+type)['default'],\r\n            createdNode = new Node(nodeParams);\r\n        createdNodes.push(createdNode);\r\n      });\r\n      _.forEach(obj.connections, function(json) {\r\n        var connectionParams = JSON.parse(json),\r\n            sourceNodeId = connectionParams.sourceNode,\r\n            targetNodeId = connectionParams.targetNode,\r\n            sourceNode, targetNode, createdConnection;\r\n        sourceNode = _.find(createdNodes, {id: sourceNodeId});\r\n        targetNode = _.find(createdNodes, {id: targetNodeId});\r\n    \r\n        connectionParams.sourceNode = sourceNode;\r\n        connectionParams.targetNode = targetNode;\r\n    \r\n        createdConnection = new Connection(connectionParams);\r\n        createdConnections.push(createdConnection);\r\n      });\r\n    \r\n      obj.nodes = createdNodes;\r\n      obj.connections = createdConnections;\r\n      return new Network(obj);\r\n    };\r\n    \r\n    __exports__[\"default\"] = Network;\n  });","define(\"asNEAT/nodes/compressorNode\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    \r\n    var Utils = require('asNEAT/utils')['default'],\r\n        Node = require('asNEAT/nodes/node')['default'],\r\n        asNEAT = require('asNEAT/asNEAT')['default'],\r\n        context = asNEAT.context,\r\n        offlineContext = asNEAT.offlineContext,\r\n        name = \"CompressorNode\";\r\n    \r\n    var CompressorNode = function(parameters) {\r\n      Node.call(this, parameters);\r\n    };\r\n    \r\n    CompressorNode.prototype = Object.create(Node.prototype);\r\n    CompressorNode.prototype.name = name;\r\n    CompressorNode.prototype.defaultParameters = {\r\n      // The decibel value above which the compression will start taking effect.\r\n      // Its default value is -24, with a nominal range of -100 to 0.\r\n      threshold: 0,\r\n    \r\n      // A decibel value representing the range above the threshold where the curve\r\n      // smoothly transitions to the \"ratio\" portion. Its default value is 30, with\r\n      // a nominal range of 0 to 40.\r\n      knee: 0,\r\n    \r\n      // The amount of dB change in input for a 1 dB change in output. Its default\r\n      // value is 12, with a nominal range of 1 to 20.\r\n      ratio: 0,\r\n    \r\n      // A read-only decibel value for metering purposes, representing the current\r\n      // amount of gain reduction that the compressor is applying to the signal.\r\n      // If fed no signal the value will be 0 (no gain reduction). The nominal range\r\n      // is -20 to 0.\r\n      reduction: 0,\r\n    \r\n      // The amount of time (in seconds) to reduce the gain by 10dB. Its default\r\n      // value is 0.003, with a nominal range of 0 to 1.\r\n      attack: 0,\r\n    \r\n      // The amount of time (in seconds) to increase the gain by 10dB. Its default\r\n      // value is 0.250, with a nominal range of 0 to 1.\r\n      release: 0,\r\n    \r\n      parameterMutationChance: 0.1,\r\n      mutatableParameters: [\r\n        {\r\n          name: 'threshold',\r\n          // doesn't make sense to change type by a delta\r\n          mutationDeltaChance: 0.8,\r\n          mutationDelta: {min: -5, max: 5},\r\n          // TODO: set global min?\r\n          randomMutationRange: {min: -50, max: 10}\r\n        },{\r\n          name: 'knee',\r\n          // doesn't make sense to change type by a delta\r\n          mutationDeltaChance: 0.8,\r\n          mutationDelta: {min: -5, max: 5},\r\n          // TODO: set global min?\r\n          randomMutationRange: {min: 20, max: 40}\r\n        },{\r\n          name: 'ratio',\r\n          // doesn't make sense to change type by a delta\r\n          mutationDeltaChance: 0.8,\r\n          mutationDelta: {min: -1, max: 1},\r\n          // TODO: set global min?\r\n          randomMutationRange: {min: 8, max: 16}\r\n        },{\r\n          name: 'reduction',\r\n          // doesn't make sense to change type by a delta\r\n          mutationDeltaChance: 0.8,\r\n          mutationDelta: {min: -1, max: 1},\r\n          // TODO: set global min?\r\n          randomMutationRange: {min: -10, max: 0}\r\n        },{\r\n          name: 'attack',\r\n          // doesn't make sense to change type by a delta\r\n          mutationDeltaChance: 0.8,\r\n          mutationDelta: {min: -0.02, max: 0.02},\r\n          // TODO: set global min?\r\n          randomMutationRange: {min: 0, max: 0.1}\r\n        },{\r\n          name: 'release',\r\n          // doesn't make sense to change type by a delta\r\n          mutationDeltaChance: 0.8,\r\n          mutationDelta: {min: -0.1, max: 0.1},\r\n          // TODO: set global min?\r\n          randomMutationRange: {min: 0, max: 0.1}\r\n        }\r\n      ]\r\n    };\r\n    \r\n    CompressorNode.prototype.clone = function() {\r\n      return new CompressorNode({\r\n        id: this.id,\r\n        threshold: this.threshold,\r\n        knee: this.knee,\r\n        ratio: this.ratio,\r\n        reduction: this.reduction,\r\n        attack: this.attack,\r\n        release: this.release,\r\n        parameterMutationChance: this.parameterMutationChance,\r\n        mutatableParameters: _.cloneDeep(this.mutatableParameters)\r\n      });\r\n    };\r\n    \r\n    // Refreshes the cached node to be played again\r\n    CompressorNode.prototype.refresh = function() {\r\n      refresh.call(this, context);\r\n    };\r\n    \r\n    CompressorNode.prototype.offlineRefresh = function() {\r\n      refresh.call(this, offlineContext, \"offline\");\r\n    };\r\n    \r\n    function refresh(context, prefix) {\r\n      var node = context.createDynamicsCompressor();\r\n      node.threshold.value = this.threshold;\r\n      node.knee.value = this.knee;\r\n      node.ratio.value = this.ratio;\r\n      node.reduction.value = this.reduction;\r\n      node.attack.value = this.attack;\r\n      node.release.value = this.release;\r\n    \r\n      var nodeName = prefix ? (prefix+'Node') : 'node';\r\n      this[nodeName] = node;\r\n    }\r\n    \r\n    CompressorNode.prototype.getParameters = function() {\r\n      return {\r\n        name: name,\r\n        id: this.id,\r\n        threshold: this.threshold,\r\n        knee: this.knee,\r\n        ratio: this.ratio,\r\n        reduction: this.reduction,\r\n        attack: this.attack,\r\n        release: this.release\r\n      };\r\n    };\r\n    \r\n    CompressorNode.prototype.toString = function() {\r\n      return this.id+\": CompressorNode(\"+\r\n        this.threshold.toFixed(2)+\",\"+\r\n        this.knee.toFixed(2)+\",\"+\r\n        this.ratio.toFixed(2)+\",\"+\r\n        this.reduction.toFixed(2)+\",\"+\r\n        this.attack.toFixed(2)+\",\"+\r\n        this.release.toFixed(2)+\")\";\r\n    };\r\n    \r\n    CompressorNode.random = function() {\r\n      var threshold = Utils.randomIn(-50, 10),\r\n          knee = Utils.randomIn(20, 40),\r\n          ratio = Utils.randomIn(8, 16),\r\n          reduction = Utils.randomIn(-10, 0),\r\n          attack = Utils.randomIn(0, 0.1),\r\n          release = Utils.randomIn(0, 0.1);\r\n    \r\n      return new CompressorNode({\r\n        threshold: threshold,\r\n        knee: knee,\r\n        ratio: ratio,\r\n        reduction: reduction,\r\n        attack: attack,\r\n        release: release\r\n      });\r\n    };\r\n    \r\n    __exports__[\"default\"] = CompressorNode;\n  });","define(\"asNEAT/nodes/convolverNode\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    \r\n    var Utils = require('asNEAT/utils')['default'],\r\n        Node = require('asNEAT/nodes/node')['default'],\r\n        asNEAT = require('asNEAT/asNEAT')['default'],\r\n        context = asNEAT.context,\r\n        offlineContext = asNEAT.offlineContext,\r\n        name = \"ConvolverNode\";\r\n    \r\n    var ConvolverNode = function(parameters) {\r\n      Node.call(this, parameters);\r\n    \r\n      // TODO: Different types of convolution instead of just noise\r\n      if (this.audioBuffer === null && context.supported) {\r\n        var noiseBuffer = context.createBuffer(2, 0.5 * context.sampleRate, context.sampleRate),\r\n            left = noiseBuffer.getChannelData(0),\r\n            right = noiseBuffer.getChannelData(1);\r\n    \r\n        for (var i = 0; i < noiseBuffer.length; i++) {\r\n            left[i] = Math.random() * 2 - 1;\r\n            right[i] = Math.random() * 2 - 1;\r\n        }\r\n    \r\n        this.audioBuffer = noiseBuffer;    \r\n      }\r\n    \r\n    };\r\n    \r\n    ConvolverNode.prototype = Object.create(Node.prototype);\r\n    ConvolverNode.prototype.name = name;\r\n    ConvolverNode.prototype.defaultParameters = {\r\n      audioBuffer: null,\r\n      parameterMutationChance: 0.1\r\n    };\r\n    \r\n    ConvolverNode.prototype.clone = function() {\r\n      return new ConvolverNode({\r\n        id: this.id,\r\n        audioBuffer: this.audioBuffer,\r\n        parameterMutationChance: this.parameterMutationChance,\r\n        mutatableParameters: _.cloneDeep(this.mutatableParameters)\r\n      });\r\n    };\r\n    \r\n    \r\n    // Refreshes the cached node to be played again\r\n    ConvolverNode.prototype.refresh = function() {\r\n      refresh.call(this, context);\r\n    };\r\n    \r\n    ConvolverNode.prototype.offlineRefresh = function() {\r\n      refresh.call(this, offlineContext, \"offline\");\r\n    };\r\n    \r\n    function refresh(context, prefix) {\r\n      var node = context.createConvolver();\r\n      node.buffer = this.audioBuffer;\r\n    \r\n      var nodeName = prefix ? (prefix+'Node') : 'node';\r\n      this[nodeName] = node;\r\n    }\r\n    \r\n    ConvolverNode.prototype.getParameters = function() {\r\n      return {\r\n        name: name,\r\n        id: this.id\r\n      };\r\n    };\r\n    \r\n    ConvolverNode.prototype.toString = function() {\r\n      return this.id+\": ConvolverNode()\";\r\n    };\r\n    \r\n    /*\r\n      @return a ConvolverNode\r\n    */\r\n    ConvolverNode.random = function() {\r\n      return new ConvolverNode();\r\n    };\r\n    \r\n    __exports__[\"default\"] = ConvolverNode;\n  });","define(\"asNEAT/nodes/delayNode\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    \r\n    var Utils = require('asNEAT/utils')['default'],\r\n        Node = require('asNEAT/nodes/node')['default'],\r\n        asNEAT = require('asNEAT/asNEAT')['default'],\r\n        context = asNEAT.context,\r\n        offlineContext = asNEAT.offlineContext,\r\n        name = \"DelayNode\";\r\n    \r\n    var DelayNode = function(parameters) {\r\n      Node.call(this, parameters);\r\n    };\r\n    \r\n    DelayNode.prototype = Object.create(Node.prototype);\r\n    DelayNode.prototype.name = name;\r\n    DelayNode.prototype.defaultParameters = {\r\n      // in seconds\r\n      delayTime: 0,\r\n    \r\n      parameterMutationChance: 0.1,\r\n      mutatableParameters: [\r\n        {\r\n          name: 'delayTime',\r\n          // doesn't make sense to change type by a delta\r\n          mutationDeltaChance: 0.8,\r\n          mutationDelta: {min: -0.5, max: 0.5},\r\n          randomMutationRange: {min: 0.0, max: 3.0}\r\n        }\r\n      ]\r\n    };\r\n    \r\n    DelayNode.prototype.clone = function() {\r\n      return new DelayNode({\r\n        id: this.id,\r\n        delayTime: this.delayTime,\r\n        parameterMutationChance: this.parameterMutationChance,\r\n        mutatableParameters: _.cloneDeep(this.mutatableParameters)\r\n      });\r\n    };\r\n    \r\n    // Refreshes the cached node to be played again\r\n    DelayNode.prototype.refresh = function() {\r\n      refresh.call(this, context);\r\n    };\r\n    \r\n    DelayNode.prototype.offlineRefresh = function() {\r\n      refresh.call(this, offlineContext, \"offline\");\r\n    };\r\n    \r\n    function refresh(context, prefix) {\r\n      var delayNode = context.createDelay();\r\n      delayNode.delayTime.value = this.delayTime;\r\n      var nodeName = prefix ? (prefix+'Node') : 'node';\r\n      this[nodeName] = delayNode;\r\n    }\r\n    \r\n    DelayNode.prototype.getParameters = function() {\r\n      return {\r\n        name: name,\r\n        id: this.id,\r\n        delayTime: this.delayTime\r\n      };\r\n    };\r\n    \r\n    DelayNode.prototype.toString = function() {\r\n      return this.id+\": DelayNode(\"+\r\n        this.delayTime.toFixed(2)+\")\";\r\n    };\r\n    \r\n    DelayNode.random = function() {\r\n      return new DelayNode({\r\n        delayTime: Utils.randomIn(0.0, 3.0)\r\n      });\r\n    };\r\n    \r\n    __exports__[\"default\"] = DelayNode;\n  });","define(\"asNEAT/nodes/feedbackDelayNode\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    \r\n    var Utils = require('asNEAT/utils')['default'],\r\n        Node = require('asNEAT/nodes/node')['default'],\r\n        asNEAT = require('asNEAT/asNEAT')['default'],\r\n        context = asNEAT.context,\r\n        offlineContext = asNEAT.offlineContext,\r\n        name = \"FeedbackDelayNode\";\r\n    \r\n    var FeedbackDelayNode = function(parameters) {\r\n      Node.call(this, parameters);\r\n    };\r\n    \r\n    FeedbackDelayNode.prototype = Object.create(Node.prototype);\r\n    FeedbackDelayNode.prototype.name = name;\r\n    FeedbackDelayNode.prototype.defaultParameters = {\r\n      // in seconds\r\n      delayTime: 0,\r\n    \r\n      // [0,1], although >=1 is allowed... not advised\r\n      feedbackRatio: 0.2,\r\n    \r\n      parameterMutationChance: 0.1,\r\n      mutatableParameters: [\r\n        {\r\n          name: 'delayTime',\r\n          // doesn't make sense to change type by a delta\r\n          mutationDeltaChance: 0.8,\r\n          mutationDelta: {min: -0.5, max: 0.5},\r\n          randomMutationRange: {min: 0.0, max: 3.0}\r\n        },{\r\n          name: 'feedbackRatio',\r\n          // doesn't make sense to change type by a delta\r\n          mutationDeltaChance: 0.8,\r\n          mutationDelta: {min: -0.2, max: 0.2},\r\n          // TODO: set global min?\r\n          randomMutationRange: {min: 0, max: 0.6}\r\n        }\r\n      ]\r\n    };\r\n    \r\n    FeedbackDelayNode.prototype.clone = function() {\r\n      return new FeedbackDelayNode({\r\n        id: this.id,\r\n        delayTime: this.delayTime,\r\n        feedbackRatio: this.feedbackRatio,\r\n        parameterMutationChance: this.parameterMutationChance,\r\n        mutatableParameters: _.cloneDeep(this.mutatableParameters)\r\n      });\r\n    };\r\n    \r\n    // Refreshes the cached node to be played again\r\n    FeedbackDelayNode.prototype.refresh = function() {\r\n      refresh.call(this, context);\r\n    };\r\n    \r\n    FeedbackDelayNode.prototype.offlineRefresh = function() {\r\n      refresh.call(this, offlineContext, \"offline\");\r\n    };\r\n    \r\n    function refresh(context, prefix) {\r\n      // base passthrough gain\r\n      var passthroughGain = context.createGain();\r\n      passthroughGain.gain.value = 1.0;\r\n    \r\n      var delayNode = context.createDelay();\r\n      delayNode.delayTime.value = this.delayTime;\r\n    \r\n      // add an additional gain node for 'delay' feedback\r\n      var feedbackGainNode = context.createGain();\r\n      feedbackGainNode.gain.value = this.feedbackRatio;\r\n    \r\n      passthroughGain.connect(delayNode);\r\n      delayNode.connect(feedbackGainNode);\r\n      feedbackGainNode.connect(passthroughGain);\r\n    \r\n      var nodeName = prefix ? (prefix+'Node') : 'node';\r\n      this[nodeName] = passthroughGain;\r\n    }\r\n    \r\n    \r\n    FeedbackDelayNode.prototype.getParameters = function() {\r\n      return {\r\n        name: name,\r\n        id: this.id,\r\n        delayTime: this.delayTime,\r\n        feedbackRatio: this.feedbackRatio\r\n      };\r\n    };\r\n    \r\n    FeedbackDelayNode.prototype.toString = function() {\r\n      return this.id+\": FeedbackDelayNode(\"+\r\n        this.delayTime.toFixed(2)+\",\"+\r\n        this.feedbackRatio.toFixed(2)+\")\";\r\n    };\r\n    \r\n    FeedbackDelayNode.random = function() {\r\n      return new FeedbackDelayNode({\r\n        delayTime: Utils.randomIn(0.0, 3.0),\r\n        feedbackRatio: Utils.randomIn(0, 0.6)\r\n      });\r\n    };\r\n    \r\n    __exports__[\"default\"] = FeedbackDelayNode;\n  });","define(\"asNEAT/nodes/filterNode\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    \r\n    var Utils = require('asNEAT/utils')['default'],\r\n        Node = require('asNEAT/nodes/node')['default'],\r\n        asNEAT = require('asNEAT/asNEAT')['default'],\r\n        context = asNEAT.context,\r\n        offlineContext = asNEAT.offlineContext,\r\n        name = \"FilterNode\",\r\n        freqMin = 0,\r\n        freqMax = 1500,\r\n        qMin = 0.0001,\r\n        qMax = 20,\r\n        gainMin = -5,\r\n        gainMax = 5;\r\n    \r\n    var FilterNode = function(parameters) {\r\n      Node.call(this, parameters);\r\n    };\r\n    \r\n    FilterNode.prototype = Object.create(Node.prototype);\r\n    FilterNode.prototype.name = name;\r\n    FilterNode.prototype.defaultParameters = {\r\n      type: 0,\r\n      frequency: 500,\r\n      detune: 0,\r\n      q: 1,\r\n      gain: 1,\r\n    \r\n      parameterMutationChance: 0.1,\r\n      mutatableParameters: [\r\n        {\r\n          name: 'type',\r\n          // doesn't make sense to change type by a delta\r\n          mutationDeltaChance: 0,\r\n          randomMutationRange: {min: 0, max: 8},\r\n          allowInverse: false,\r\n          discreteMutation: true\r\n        },{\r\n          name: 'frequency',\r\n          // doesn't make sense to change type by a delta\r\n          mutationDeltaChance: 0.8,\r\n          mutationDelta: {min: -500, max: 500},\r\n          // TODO: set global min?\r\n          randomMutationRange: {min: 27.5, max: 1046.5}\r\n        }\r\n        // todo: other parameters\r\n      ],\r\n      connectableParameters: [\r\n        {\r\n          name: \"frequency\",\r\n          amplitudeScaling: {min: freqMin, max: freqMax}\r\n        },\r\n        {\r\n          name: \"Q\",\r\n          amplitudeScaling: {min: qMin, max: qMin}\r\n        },\r\n        {\r\n          name: \"gain\",\r\n          amplitudeScaling: {min: gainMin, max: gainMax}\r\n        }\r\n      ]\r\n    };\r\n    \r\n    FilterNode.prototype.clone = function() {\r\n      return new FilterNode({\r\n        id: this.id,\r\n        type: this.type,\r\n        frequency: this.frequency,\r\n        detune: this.detune,\r\n        q: this.q,\r\n        gain: this.gain,\r\n        parameterMutationChance: this.parameterMutationChance,\r\n        mutatableParameters: _.cloneDeep(this.mutatableParameters)\r\n      });\r\n    };\r\n    \r\n    // Refreshes the cached node to be played again\r\n    FilterNode.prototype.refresh = function() {\r\n      refresh.call(this, context);\r\n    };\r\n    \r\n    FilterNode.prototype.offlineRefresh = function() {\r\n      refresh.call(this, offlineContext, \"offline\");\r\n    };\r\n    \r\n    function refresh(context, prefix) {\r\n      var node = context.createBiquadFilter();\r\n      node.type = this.type;\r\n      node.frequency.value = this.frequency;\r\n      node.detune.value = this.detune;\r\n      node.Q.value = this.q;\r\n      node.gain.value = this.gain;\r\n    \r\n      var nodeName = prefix ? (prefix+'Node') : 'node';\r\n      this[nodeName] = node;\r\n    }\r\n    \r\n    FilterNode.prototype.getParameters = function() {\r\n      return {\r\n        name: name,\r\n        id: this.id,\r\n        type: FilterNode.TYPES.nameFor(this.type),\r\n        frequency: this.frequency,\r\n        detune: this.detune,\r\n        q: this.q,\r\n        gain: this.gain,\r\n      };\r\n    };\r\n    \r\n    FilterNode.prototype.toString = function() {\r\n      return this.id+\": FilterNode(\"+this.type+\",\"+this.frequency.toFixed(2)+\")\";\r\n    };\r\n    \r\n    FilterNode.TYPES = [\r\n      \"lowpass\",\r\n      \"highpass\",\r\n      \"bandpass\",\r\n      \"lowshelf\",\r\n      \"highshelf\",\r\n      \"peaking\",\r\n      \"notch\",\r\n      \"allpass\"\r\n    ];\r\n    FilterNode.TYPES.nameFor = function(type) {\r\n      if (typeof type ===\"string\") return type;\r\n      return FilterNode.TYPES[type];\r\n    };\r\n    FilterNode.random = function() {\r\n      var typeI = Utils.randomIndexIn(0,FilterNode.TYPES.length),\r\n          // A0 to C8\r\n          freq = Utils.randomIn(freqMin, freqMax),\r\n          q = Utils.randomIn(qMin, qMax),\r\n          gain = Utils.randomIn(gainMin, gainMax);\r\n    \r\n      // frequency - 350Hz, with a nominal range of 10 to the Nyquist frequency (half the sample-rate).\r\n      // Q - 1, with a nominal range of 0.0001 to 1000.\r\n      // gain - 0, with a nominal range of -40 to 40.\r\n    \r\n      return new FilterNode({\r\n        type: FilterNode.TYPES[typeI],\r\n        frequency: freq,\r\n        // TODO: specefic ranges based on type\r\n        q: q,\r\n        gain: gain\r\n        //detune: 0,\r\n      });\r\n    };\r\n    \r\n    __exports__[\"default\"] = FilterNode;\n  });","define(\"asNEAT/nodes/gainNode\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    \r\n    var Utils = require('asNEAT/utils')['default'],\r\n        Node = require('asNEAT/nodes/node')['default'],\r\n        asNEAT = require('asNEAT/asNEAT')['default'],\r\n        context = asNEAT.context,\r\n        offlineContext = asNEAT.offlineContext,\r\n        name = \"GainNode\",\r\n        gainMin = 0.5,\r\n        gainMax = 1.5;\r\n    \r\n    var GainNode = function(parameters) {\r\n      Node.call(this, parameters);\r\n    };\r\n    \r\n    GainNode.prototype = Object.create(Node.prototype);\r\n    GainNode.prototype.name = name;\r\n    GainNode.prototype.defaultParameters = {\r\n      // Represents the amount of gain to apply. Its default value is 1\r\n      // (no gain change). The nominal minValue is 0, but may be set\r\n      // negative for phase inversion. The nominal maxValue is 1, but\r\n      // higher values are allowed (no exception thrown).This parameter\r\n      // is a-rate\r\n      gain: 1,\r\n    \r\n      parameterMutationChance: 0.1,\r\n      mutatableParameters: [\r\n        {\r\n          name: 'gain',\r\n          // doesn't make sense to change type by a delta\r\n          mutationDeltaChance: 0.8,\r\n          mutationDelta: {min: -0.2, max: 0.2},\r\n          // TODO: set global min?\r\n          randomMutationRange: {min: -1, max: 1}\r\n        }\r\n      ],\r\n      connectableParameters: [\r\n        {\r\n          name: \"gain\",\r\n          amplitudeScaling: {min: -1*gainMax, max: gainMax}\r\n        }\r\n      ]\r\n    };\r\n    \r\n    GainNode.prototype.clone = function() {\r\n      return new GainNode({\r\n        id: this.id,\r\n        gain: this.gain,\r\n        parameterMutationChance: this.parameterMutationChance,\r\n        mutatableParameters: _.cloneDeep(this.mutatableParameters)\r\n      });\r\n    };\r\n    \r\n    \r\n    // Refreshes the cached node to be played again\r\n    GainNode.prototype.refresh = function() {\r\n      refresh.call(this, context);\r\n    };\r\n    \r\n    GainNode.prototype.offlineRefresh = function() {\r\n      refresh.call(this, offlineContext, \"offline\");\r\n    };\r\n    \r\n    function refresh(context, prefix) {\r\n      var node = context.createGain();\r\n      node.gain.value = this.gain;\r\n      var nodeName = prefix ? (prefix+'Node') : 'node';\r\n      this[nodeName] = node;\r\n    }\r\n    \r\n    GainNode.prototype.getParameters = function() {\r\n      return {\r\n        name: name,\r\n        id: this.id,\r\n        gain: this.gain\r\n      };\r\n    };\r\n    \r\n    GainNode.prototype.toString = function() {\r\n      return this.id+\": GainNode(\"+\r\n        this.gain.toFixed(2)+\")\";\r\n    };\r\n    \r\n    /*\r\n      @return a GainNode with a gain of [0.5, 1.5) || (-1.5, -5.1]\r\n    */\r\n    GainNode.random = function() {\r\n      var isInverse = Utils.randomBool(),\r\n          gain = Utils.randomIn(gainMin, gainMax);\r\n      gain*= (isInverse? -1 : 1);\r\n    \r\n      return new GainNode({\r\n        gain: gain\r\n      });\r\n    };\r\n    \r\n    __exports__[\"default\"] = GainNode;\n  });","define(\"asNEAT/nodes/node\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    \r\n    var Utils = require('asNEAT/utils')['default'],\r\n        name = \"Node\";\r\n    \r\n    var Node = function(parameters) {\r\n      Utils.extend(this, this.defaultParameters, parameters);\r\n    \r\n      this.hasChanged = false;\r\n    \r\n      // Only generate a new id if one isn't given in the parameters\r\n      if (parameters && typeof parameters.id !== 'undefined')\r\n        this.id = parameters.id;\r\n      else\r\n        this.id = Utils.createHash();\r\n    };\r\n    \r\n    Node.prototype.name = name;\r\n    Node.prototype.defaultParameters = {\r\n      parameterMutationChance: 0.1,\r\n      mutatableParameters: [\r\n      //  { see Utils.mutateParameter documentation\r\n      //    name,\r\n      //    mutationDeltaChance: chance for mutating by delta or by ranomd change,\r\n      //    mutationDelta: range that the parameter can be shifter by,\r\n      //    randomMutationRange: range parameter can be randomly changed to,\r\n      //    discreteMutation: if mutations should be integers\r\n      //  }\r\n      ],\r\n    \r\n      connectableParameters: [\r\n        //{\r\n        //  name: \"frequency\", : must be able to osc.connect(node.name)\r\n        //  nodeName: \"oscNode\" : if the parameter is anything other than 'node' for the object\r\n        //  amplitudeScaling: {min: -2000, max: 2000} : range of allowed amplitude\r\n        //  modulating the parameter\r\n        //  // TODO: Handle snapping to carrier frequency multiple?\r\n        //  // http://greweb.me/2013/08/FM-audio-api/\r\n        //}\r\n      ]\r\n    }; \r\n    \r\n    /**\r\n      Creates a cloned node\r\n      @return Node\r\n    */\r\n    Node.prototype.clone = function() {\r\n      throw \"clone not implemented\";\r\n    };\r\n    \r\n    \r\n    // TODO: Merge refresh and offline refresh?\r\n    \r\n    /**\r\n      Refreshes any web audio context nodes\r\n    */\r\n    Node.prototype.refresh = function() {\r\n      throw \"refresh not implemented\";\r\n    };\r\n    \r\n    /**\r\n      Refreshes any web audio offline nodes\r\n    */\r\n    Node.prototype.offlineRefresh = function() {\r\n      throw \"offline refresh not implemented\";\r\n    };\r\n    \r\n    /**\r\n      Gets the various parameters characterizing this node\r\n    */\r\n    Node.prototype.getParameters = function() {\r\n      throw \"getParameters not implemented\";\r\n    };\r\n    \r\n    Node.prototype.toString = function() {\r\n      throw \"toString not implemented\";\r\n    };\r\n    \r\n    /**\r\n      Mutates at least one parameter\r\n      @return this Node\r\n    */\r\n    Node.prototype.mutate = function() {\r\n      var self = this,\r\n          chance = this.parameterMutationChance,\r\n          parameters = this.mutatableParameters,\r\n          mutated = false;\r\n    \r\n      if (!parameters || parameters.length===0) {\r\n        Utils.log('no mutation parameters');\r\n        return this;\r\n      }\r\n      _.forEach(this.mutatableParameters, function(param) {\r\n        if (!Utils.randomChance(chance))\r\n          return true;\r\n        mutate(param);\r\n        mutated = true;\r\n      });\r\n    \r\n      if (!mutated) {\r\n        var param = Utils.randomElementIn(parameters);\r\n        mutate(param);\r\n      }\r\n    \r\n      return this;\r\n    \r\n      function mutate(param) {\r\n        Utils.mutateParameter({\r\n          obj: self,\r\n          parameter: param.name,\r\n          mutationDeltaChance: param.mutationDeltaChance,\r\n          mutationDelta: param.mutationDelta,\r\n          randomMutationRange: param.randomMutationRange,\r\n          allowInverse: param.allowInverse,\r\n          discreteMutation: param.discreteMutation\r\n        }, this);\r\n      }\r\n    };\r\n    \r\n    Node.prototype.toJSON = function() {\r\n      var json = this.getParameters();\r\n      return JSON.stringify(json);\r\n    };\r\n    \r\n    /**\r\n      Creates a random node\r\n      @return Node\r\n      */\r\n    Node.random = function() {\r\n      throw \"static random not implemented\";\r\n    };\r\n    \r\n    __exports__[\"default\"] = Node;\n  });","define(\"asNEAT/nodes/noteOscillatorNode\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    var Utils = require('asNEAT/utils')['default'],\r\n        Node = require('asNEAT/nodes/node')['default'],\r\n        OscillatorNode = require('asNEAT/nodes/oscillatorNode')['default'],\r\n        asNEAT = require('asNEAT/asNEAT')['default'],\r\n        context = asNEAT.context,\r\n        offlineContext = asNEAT.offlineContext,\r\n        name = \"NoteOscillatorNode\";\r\n    /**\r\n      An OscillatorNode that clamps its frequency to an\r\n      equal tempered scale\r\n    */\r\n    var NoteOscillatorNode = function(parameters) {\r\n      Node.call(this, parameters);\r\n    };\r\n    \r\n    NoteOscillatorNode.prototype = Object.create(Node.prototype);\r\n    NoteOscillatorNode.prototype.name = name;\r\n    NoteOscillatorNode.prototype.defaultParameters = {\r\n      name: name,\r\n    \r\n      type: 0,\r\n    \r\n      // Offset from root (currently A4=440) to play\r\n      // @note This parameter isn't evolved but is useful when\r\n      // playing a set note from either an onscreen or MIDI keyboard\r\n      stepFromRootNote: 0,\r\n      \r\n      // offset from note determined by root_stepFromRootNote\r\n      noteOffset: 0,\r\n      \r\n      detune: 0,\r\n      \r\n      // ADSR model\r\n      attackDuration: 0.2,\r\n      decayDuration: 0.4,\r\n      releaseDuration: 0.2,\r\n    \r\n      // For single playback\r\n      sustainDuration: 0.5,\r\n      \r\n      attackVolume: 1.1,\r\n      sustainVolume: 1.0,\r\n    \r\n      parameterMutationChance: 0.1,\r\n      mutatableParameters: [\r\n        {\r\n          name: 'type',\r\n          // doesn't make sense to change type by a delta\r\n          mutationDeltaChance: 0,\r\n          randomMutationRange: {min: 0, max: 4},\r\n          allowInverse: false,\r\n          discreteMutation: true\r\n        },{\r\n          name: 'noteOffset',\r\n          // doesn't make sense to change type by a delta\r\n          mutationDeltaChance: 0.8,\r\n          mutationDelta: {min: -5, max: 5},\r\n          // TODO: set global min?\r\n          randomMutationRange: {min: -20, max: 20},\r\n          discreteMutation: true\r\n        },{\r\n          name: 'attackDuration',\r\n          mutationDeltaChance: 0.8,\r\n          mutationDelta: {min: -0.1, max: 0.1},\r\n          // TODO: set global min?\r\n          randomMutationRange: {min: 0.01, max: 1.0}\r\n        },{\r\n          name: 'decayDuration',\r\n          mutationDeltaChance: 0.8,\r\n          mutationDelta: {min: -0.1, max: 0.1},\r\n          // TODO: set global min?\r\n          randomMutationRange: {min: 0.01, max: 1.0}\r\n        },{\r\n          name: 'releaseDuration',\r\n          mutationDeltaChance: 0.8,\r\n          mutationDelta: {min: -0.1, max: 0.1},\r\n          // TODO: set global min?\r\n          randomMutationRange: {min: 0.01, max: 1.0}\r\n        },{\r\n          name: 'attackVolume',\r\n          mutationDeltaChance: 0.8,\r\n          mutationDelta: {min: -0.1, max: 0.1},\r\n          // TODO: set global min?\r\n          randomMutationRange: {min: 0.5, max: 1.5}\r\n        }\r\n      ],\r\n      connectableParameters: [\r\n        {\r\n          name: \"frequency\",\r\n          nodeName: \"oscNode\",\r\n          amplitudeScaling: {min: -2000, max: 2000}\r\n        }\r\n      ]\r\n    };\r\n    \r\n    NoteOscillatorNode.prototype.clone = function() {\r\n      return new NoteOscillatorNode({\r\n        id: this.id,\r\n        type: this.type,\r\n        noteOffset: this.noteOffset,\r\n        detune: this.detune,\r\n        attackDuration: this.attackDuration,\r\n        decayDuration: this.decayDuration,\r\n        releaseDuration: this.releaseDuration,\r\n        sustainDuration: this.sustainDuration,\r\n        attackVolume: this.attackVolume,\r\n        sustainVolume: this.sustainVolume,\r\n        parameterMutationChance: this.parameterMutationChance,\r\n        mutatableParameters: _.cloneDeep(this.mutatableParameters)\r\n      });\r\n    };\r\n    \r\n    // Refreshes the cached node to be played again\r\n    NoteOscillatorNode.prototype.refresh = function() {\r\n      refresh.call(this, context);\r\n    };\r\n    NoteOscillatorNode.prototype.offlineRefresh = function() {\r\n      refresh.call(this, offlineContext, \"offline\");\r\n    };\r\n    \r\n    function refresh(context, prefix) {\r\n      var oscillator = context.createOscillator();\r\n      oscillator.type = this.type;\r\n      oscillator.frequency.value = Utils.frequencyOfStepsFromRootNote(\r\n          this.stepFromRootNote + this.noteOffset);\r\n      var gainNode = context.createGain();\r\n      oscillator.connect(gainNode);\r\n    \r\n      var oscName = prefix ? (prefix + 'OscNode') : 'oscNode';\r\n      var nodeName = prefix ? (prefix + 'Node') : 'node';\r\n      this[oscName] = oscillator;\r\n      this[nodeName] = gainNode;\r\n    }\r\n    \r\n    NoteOscillatorNode.prototype.play = function() {\r\n      var gainNode = this.node,\r\n          oscNode = this.oscNode;\r\n      play.call(this, gainNode, oscNode);\r\n    };\r\n    \r\n    NoteOscillatorNode.prototype.offlinePlay = function() {\r\n      var gainNode = this.offlineNode,\r\n          oscNode = this.offlineOscNode;\r\n      play.call(this, gainNode, oscNode);\r\n    };\r\n    \r\n    function play(gainNode, oscNode) {\r\n      var self = this,\r\n          waitTime = this.attackDuration + this.decayDuration + this.sustainDuration,\r\n          attackVolume = this.attackVolume,\r\n          attackDuration = this.attackDuration,\r\n          sustainVolume = this.sustainVolume,\r\n          decayDuration = this.decayDuration,\r\n          releaseDuration = this.releaseDuration;\r\n      OscillatorNode.setupEnvelope(gainNode, oscNode,\r\n        attackVolume, attackDuration, sustainVolume, decayDuration);\r\n      setTimeout(function() {\r\n        OscillatorNode.setupRelease(gainNode, oscNode, releaseDuration);\r\n      }, waitTime * 1000);\r\n    }\r\n    \r\n    /**\r\n      Plays a note until the return handler is called\r\n      @return function stop\r\n    **/\r\n    NoteOscillatorNode.prototype.playHold = function() {\r\n      var self = this,\r\n          waitTime = this.attackDuration + this.decayDuration + this.sustainDuration,\r\n          gainNode = this.node,\r\n          oscNode = this.oscNode,\r\n          attackVolume = this.attackVolume,\r\n          attackDuration = this.attackDuration,\r\n          sustainVolume = this.sustainVolume,\r\n          decayDuration = this.decayDuration,\r\n          releaseDuration = this.releaseDuration;\r\n      OscillatorNode.setupEnvelope(gainNode, oscNode,\r\n        attackVolume, attackDuration, sustainVolume, decayDuration);\r\n      return function stop() {\r\n        OscillatorNode.setupRelease(gainNode, oscNode, releaseDuration);\r\n      };\r\n    };\r\n    \r\n    NoteOscillatorNode.prototype.getParameters = function() {\r\n      return {\r\n        name: name,\r\n        id: this.id,\r\n        type: OscillatorNode.TYPES.nameFor(this.type),\r\n        noteOffset: this.noteOffset,\r\n        //note: Utils.noteForFrequency(\r\n        //        Utils.frequencyOfStepsFromRootNote(\r\n        //          this.noteOffset)),\r\n        detune: this.detune,\r\n        attackDuration: this.attackDuration,\r\n        decayDuration: this.decayDuration,\r\n        releaseDuration: this.releaseDuration,\r\n        sustainDuration: this.sustainDuration,\r\n        attackVolume: this.attackVolume,\r\n        sustainVolume: this.sustainVolume\r\n      };\r\n    };\r\n    \r\n    NoteOscillatorNode.prototype.toString = function() {\r\n      return this.id+\": NoteOscillatorNode(\"+this.type+\",\"+this.noteOffset+\r\n        \", ADSR: \"+this.attackDuration.toFixed(2)+\" (\"+this.attackVolume.toFixed(2)+\"), \"+\r\n                 this.decayDuration.toFixed(2)+\", \"+\r\n                 this.sustainDuration.toFixed(2)+\" (\"+this.sustainVolume.toFixed(2)+\"), \"+\r\n                 this.releaseDuration.toFixed(2)+\")\";\r\n    };\r\n    \r\n    NoteOscillatorNode.random = function() {\r\n      var typeI = Utils.randomIndexIn(0,OscillatorNode.TYPES.length),\r\n          noteOffset = Utils.randomIndexIn(-20, 20),\r\n          attackDuration = Utils.randomIn(0.01, 1.0),\r\n          decayDuration = Utils.randomIn(0.01, 1.0),\r\n          releaseDuration = Utils.randomIn(0.01, 1.0),\r\n          attackVolume = Utils.randomIn(0.5, 1.5);\r\n    \r\n      // noteOffset - # of steps from the root note (default A4=440hz) on a tempered scale.\r\n      // Q - 1, with a nominal range of 0.0001 to 1000.\r\n      // gain - 0, with a nominal range of -40 to 40.\r\n    \r\n      return new NoteOscillatorNode({\r\n        type: OscillatorNode.TYPES[typeI],\r\n        noteOffset: noteOffset,\r\n        attackDuration: attackDuration,\r\n        decayDuration: decayDuration,\r\n        releaseDuration: releaseDuration,\r\n        attackVolume: attackVolume\r\n      });\r\n    };\r\n    \r\n    __exports__[\"default\"] = NoteOscillatorNode;\n  });","define(\"asNEAT/nodes/oscillatorNode\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    \r\n    var Utils = require('asNEAT/utils')['default'],\r\n        Node = require('asNEAT/nodes/node')['default'],\r\n        asNEAT = require('asNEAT/asNEAT')['default'],\r\n        context = asNEAT.context,\r\n        offlineContext = asNEAT.offlineContext,\r\n        name = \"OscillatorNode\",\r\n        utils = {},\r\n        A0 = 27.5,\r\n        C6 = 1046.5,\r\n        C8 = 4186.0;\r\n    \r\n    var OscillatorNode = function(parameters) {\r\n      Node.call(this, parameters);\r\n    };\r\n    \r\n    OscillatorNode.prototype = Object.create(Node.prototype);\r\n    OscillatorNode.prototype.name = name;\r\n    \r\n    OscillatorNode.prototype.defaultParameters = {\r\n      type: 0,\r\n      frequency: 1000,\r\n      detune: 0,\r\n      \r\n      // ADSR model\r\n      attackDuration: 0.2,\r\n      decayDuration: 0.4,\r\n      releaseDuration: 0.2,\r\n      sustainDuration: 0.5,\r\n      attackVolume: 1.1,\r\n      sustainVolume: 1.0,\r\n    \r\n      parameterMutationChance: 0.1,\r\n      mutatableParameters: [\r\n        {\r\n          name: 'type',\r\n          // doesn't make sense to change type by a delta\r\n          mutationDeltaChance: 0,\r\n          randomMutationRange: {min: 0, max: 4},\r\n          allowInverse: false,\r\n          discreteMutation: true\r\n        },{\r\n          name: 'frequency',\r\n          mutationDeltaChance: 0.8,\r\n          mutationDelta: {min: -500, max: 500},\r\n          // TODO: set global min?\r\n          randomMutationRange: {min: A0, max: C6}\r\n        },{\r\n          name: 'attackDuration',\r\n          mutationDeltaChance: 0.8,\r\n          mutationDelta: {min: -0.1, max: 0.1},\r\n          // TODO: set global min?\r\n          randomMutationRange: {min: 0.01, max: 1.0}\r\n        },{\r\n          name: 'decayDuration',\r\n          mutationDeltaChance: 0.8,\r\n          mutationDelta: {min: -0.1, max: 0.1},\r\n          // TODO: set global min?\r\n          randomMutationRange: {min: 0.01, max: 1.0}\r\n        },{\r\n          name: 'releaseDuration',\r\n          mutationDeltaChance: 0.8,\r\n          mutationDelta: {min: -0.1, max: 0.1},\r\n          // TODO: set global min?\r\n          randomMutationRange: {min: 0.01, max: 1.0}\r\n        },{\r\n          name: 'attackVolume',\r\n          mutationDeltaChance: 0.8,\r\n          mutationDelta: {min: -0.1, max: 0.1},\r\n          // TODO: set global min?\r\n          randomMutationRange: {min: 0.5, max: 1.5}\r\n        }\r\n      ],\r\n      connectableParameters: [\r\n        {\r\n          name: \"frequency\",\r\n          nodeName: \"oscNode\",\r\n          amplitudeScaling: {min: -2000, max: 2000}\r\n        }\r\n      ]\r\n    };\r\n    \r\n    OscillatorNode.prototype.clone = function() {\r\n      return new OscillatorNode({\r\n        id: this.id,\r\n        type: this.type,\r\n        frequency: this.frequency,\r\n        detune: this.detune,\r\n        attackDuration: this.attackDuration,\r\n        decayDuration: this.decayDuration,\r\n        releaseDuration: this.releaseDuration,\r\n        sustainDuration: this.sustainDuration,\r\n        attackVolume: this.attackVolume,\r\n        sustainVolume: this.sustainVolume,\r\n        parameterMutationChance: this.parameterMutationChance,\r\n        mutatableParameters: _.cloneDeep(this.mutatableParameters)\r\n      });\r\n    };\r\n    \r\n    // Refreshes the cached node to be played again\r\n    OscillatorNode.prototype.refresh = function() {\r\n      refresh.call(this, context);\r\n    };\r\n    \r\n    OscillatorNode.prototype.offlineRefresh = function() {\r\n      refresh.call(this, offlineContext, \"offline\");\r\n    };\r\n    \r\n    function refresh(context, prefix) {\r\n      var oscillator = context.createOscillator();\r\n      oscillator.type = this.type;\r\n      oscillator.frequency.value = this.frequency;\r\n      var gainNode = context.createGain();\r\n      oscillator.connect(gainNode);\r\n    \r\n      var oscName = prefix ? (prefix + 'OscNode') : 'oscNode';\r\n      var nodeName = prefix ? (prefix + 'Node') : 'node';\r\n      this[oscName] = oscillator;\r\n      this[nodeName] = gainNode;\r\n    }\r\n    \r\n    OscillatorNode.prototype.play = function() {\r\n      var gainNode = this.node,\r\n          oscNode = this.oscNode;\r\n      play.call(this, gainNode, oscNode);\r\n    };\r\n    OscillatorNode.prototype.offlinePlay = function() {\r\n      var gainNode = this.offlineNode,\r\n          oscNode = this.offlineOscNode;\r\n      play.call(this, gainNode, oscNode);\r\n    };\r\n    \r\n    function play(gainNode, oscNode) {\r\n      var self = this,\r\n          waitTime = this.attackDuration + this.decayDuration + this.sustainDuration,\r\n          attackVolume = this.attackVolume,\r\n          attackDuration = this.attackDuration,\r\n          sustainVolume = this.sustainVolume,\r\n          decayDuration = this.decayDuration,\r\n          releaseDuration = this.releaseDuration;\r\n      OscillatorNode.setupEnvelope(gainNode, oscNode,\r\n        attackVolume, attackDuration, sustainVolume, decayDuration);\r\n      setTimeout(function() {\r\n        OscillatorNode.setupRelease(gainNode, oscNode, releaseDuration);\r\n      }, waitTime * 1000);\r\n    }\r\n    \r\n    /**\r\n      Plays a note until the return handler is called\r\n      @return function stop\r\n    **/\r\n    OscillatorNode.prototype.playHold = function() {\r\n      var self = this,\r\n          waitTime = this.attackDuration + this.decayDuration + this.sustainDuration,\r\n          gainNode = this.node,\r\n          oscNode = this.oscNode,\r\n          attackVolume = this.attackVolume,\r\n          attackDuration = this.attackDuration,\r\n          sustainVolume = this.sustainVolume,\r\n          decayDuration = this.decayDuration,\r\n          releaseDuration = this.releaseDuration;\r\n      OscillatorNode.setupEnvelope(gainNode, oscNode,\r\n        attackVolume, attackDuration, sustainVolume, decayDuration);\r\n      return function stop() {\r\n        OscillatorNode.setupRelease(gainNode, oscNode, releaseDuration);\r\n      };\r\n    };\r\n    \r\n    OscillatorNode.prototype.getParameters = function() {\r\n      return {\r\n        name: name,\r\n        id: this.id,\r\n        type: OscillatorNode.TYPES.nameFor(this.type),\r\n        frequency: this.frequency,\r\n        detune: this.detune,\r\n        attackDuration: this.attackDuration,\r\n        decayDuration: this.decayDuration,\r\n        releaseDuration: this.releaseDuration,\r\n        sustainDuration: this.sustainDuration,\r\n        attackVolume: this.attackVolume,\r\n        sustainVolume: this.sustainVolume\r\n      };\r\n    };\r\n    \r\n    OscillatorNode.prototype.toString = function() {\r\n      return this.id+\": OscillatorNode(t:\"+this.type+\", f:\"+this.frequency.toFixed(2)+\r\n        \", ADSR: \"+this.attackDuration.toFixed(2)+\" (\"+this.attackVolume.toFixed(2)+\"), \"+\r\n                 this.decayDuration.toFixed(2)+\", \"+\r\n                 this.sustainDuration.toFixed(2)+\" (\"+this.sustainVolume.toFixed(2)+\"), \"+\r\n                 this.releaseDuration.toFixed(2)+\")\";\r\n    };\r\n    \r\n    \r\n    OscillatorNode.TYPES = [\r\n      \"sine\",\r\n      \"square\",\r\n      \"sawtooth\",\r\n      \"triangle\"\r\n      //\"custom\"\r\n    ];\r\n    OscillatorNode.TYPES.nameFor = function(type) {\r\n      if (typeof type ===\"string\") return type;\r\n      return OscillatorNode.TYPES[type];\r\n    };\r\n    OscillatorNode.random = function() {\r\n      var typeI = Utils.randomIndexIn(0,OscillatorNode.TYPES.length),\r\n          freq = Utils.randomIn(A0, C6),\r\n          attackDuration = Utils.randomIn(0.01, 1.0),\r\n          decayDuration = Utils.randomIn(0.01, 1.0),\r\n          releaseDuration = Utils.randomIn(0.01, 1.0),\r\n          attackVolume = Utils.randomIn(0.5, 1.5);\r\n    \r\n      // From w3 spec\r\n      // frequency - 350Hz, with a nominal range of 10 to the Nyquist frequency (half the sample-rate).\r\n      // Q - 1, with a nominal range of 0.0001 to 1000.\r\n      // gain - 0, with a nominal range of -40 to 40.\r\n    \r\n      return new OscillatorNode({\r\n        type: OscillatorNode.TYPES[typeI],\r\n        frequency: freq,\r\n        attackDuration: attackDuration,\r\n        decayDuration: decayDuration,\r\n        releaseDuration: releaseDuration,\r\n        attackVolume: attackVolume\r\n      });\r\n    };\r\n    \r\n    // All params passed in in case the calling oscillator has changed its parameters before releasing the osc\r\n    OscillatorNode.setupEnvelope = function(gainNode, oscNode, attackVolume, attackDuration, sustainVolume, decayDuration) {\r\n      var time = context.currentTime;\r\n      gainNode.gain.cancelScheduledValues(time);\r\n      gainNode.gain.value = 1.0;\r\n      gainNode.gain.setValueAtTime(0, time);\r\n      gainNode.gain.linearRampToValueAtTime(attackVolume, time + attackDuration);\r\n      gainNode.gain.linearRampToValueAtTime(sustainVolume, time + attackDuration + decayDuration);\r\n      oscNode.start(0);\r\n    };\r\n    OscillatorNode.setupRelease = function(gainNode, oscNode, releaseDuration) {\r\n      var time = context.currentTime;\r\n      gainNode.gain.cancelScheduledValues(0);\r\n      gainNode.gain.setValueAtTime(gainNode.gain.value, time);\r\n      gainNode.gain.linearRampToValueAtTime(0, time + releaseDuration);\r\n      oscNode.stop(time + releaseDuration);\r\n    };\r\n    \r\n    __exports__[\"default\"] = OscillatorNode;\n  });","define(\"asNEAT/nodes/outNode\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    \r\n    var Node = require('asNEAT/nodes/node')['default'],\r\n        asNEAT = require('asNEAT/asNEAT')['default'],\r\n        context = asNEAT.context,\r\n        offlineContext = asNEAT.offlineContext,\r\n        name = \"OutNode\";\r\n    \r\n    var OutNode = function(parameters) {\r\n      Node.call(this, parameters);\r\n    \r\n      // force outNode to have an id of 0 so multiple\r\n      // unlike networks can still be crossed\r\n      this.id = 0;\r\n      \r\n      this.globalGain = asNEAT.globalGain;\r\n      this.offlineGlobalGain = asNEAT.offlineGlobalGain;\r\n    \r\n      if (!context.supported)\r\n        return;\r\n    \r\n      var localGain = context.createGain();\r\n      localGain.gain.value = 1.0;\r\n      localGain.connect(this.globalGain);\r\n      this.node = localGain;\r\n    \r\n      var offlineLocalGain = offlineContext.createGain();\r\n      offlineLocalGain.gain.value = 1.0;\r\n      offlineLocalGain.connect(this.offlineGlobalGain);\r\n      this.offlineNode = offlineLocalGain;\r\n    };\r\n    \r\n    OutNode.prototype = Object.create(Node.prototype);\r\n    OutNode.prototype.name = name;\r\n    OutNode.prototype.defaultParameters = {};\r\n    OutNode.prototype.clone = function() {\r\n      return new OutNode({\r\n        id: this.id\r\n      });\r\n    };\r\n    OutNode.prototype.refresh = function() {};\r\n    OutNode.prototype.offlineRefresh = function() {};\r\n    OutNode.prototype.getParameters = function() {\r\n      return {\r\n        name: name,\r\n        id: this.id\r\n      };\r\n    };\r\n    OutNode.prototype.toString = function() {\r\n      return this.id+\": OutNode\";\r\n    };\r\n    \r\n    __exports__[\"default\"] = OutNode;\n  });","define(\"asNEAT/nodes/pannerNode\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    \r\n    var Utils = require('asNEAT/utils')['default'],\r\n        Node = require('asNEAT/nodes/node')['default'],\r\n        asNEAT = require('asNEAT/asNEAT')['default'],\r\n        context = asNEAT.context,\r\n        offlineContext = asNEAT.offlineContext,\r\n        name = \"PannerNode\";\r\n    \r\n    var PannerNode = function(parameters) {\r\n      Node.call(this, parameters);\r\n    };\r\n    \r\n    PannerNode.prototype = Object.create(Node.prototype);\r\n    PannerNode.prototype.name = name;\r\n    PannerNode.prototype.defaultParameters = {\r\n      // position\r\n      x: 0,\r\n      y: 0,\r\n      z: 0,\r\n    \r\n      parameterMutationChance: 0.1,\r\n      mutatableParameters: [\r\n        {\r\n          name: 'x',\r\n          // doesn't make sense to change type by a delta\r\n          mutationDeltaChance: 0.8,\r\n          mutationDelta: {min: -5, max: 5},\r\n          // TODO: set global min?\r\n          randomMutationRange: {min: -5, max: 5}\r\n        },{\r\n          name: 'y',\r\n          // doesn't make sense to change type by a delta\r\n          mutationDeltaChance: 0.8,\r\n          mutationDelta: {min: -5, max: 5},\r\n          // TODO: set global min?\r\n          randomMutationRange: {min: -5, max: 5}\r\n        },{\r\n          name: 'z',\r\n          // doesn't make sense to change type by a delta\r\n          mutationDeltaChance: 0.8,\r\n          mutationDelta: {min: -5, max: 5},\r\n          // TODO: set global min?\r\n          randomMutationRange: {min: -5, max: 5}\r\n        }\r\n      ]\r\n    };\r\n    \r\n    PannerNode.prototype.clone = function() {\r\n      return new PannerNode({\r\n        id: this.id,\r\n        x: this.x,\r\n        y: this.y,\r\n        z: this.z,\r\n        parameterMutationChance: this.parameterMutationChance,\r\n        mutatableParameters: _.cloneDeep(this.mutatableParameters)\r\n      });\r\n    };\r\n    \r\n    // Refreshes the cached node to be played again\r\n    PannerNode.prototype.refresh = function() {\r\n      refresh.call(this, context);\r\n    };\r\n    \r\n    PannerNode.prototype.offlineRefresh = function() {\r\n      refresh.call(this, offlineContext, \"offline\");\r\n    };\r\n    \r\n    function refresh(context, prefix) {\r\n      var node = context.createPanner();\r\n      node.setPosition(this.x, this.y, this.z);\r\n      //node.setVelocity\r\n      //node.setOrientation\r\n      //other parameters: distance model, sound cone, &c...\r\n    \r\n      var nodeName = prefix ? (prefix+'Node') : 'node';\r\n      this[nodeName] = node;\r\n    }\r\n    \r\n    PannerNode.prototype.getParameters = function() {\r\n      return {\r\n        name: name,\r\n        id: this.id,\r\n        x: this.x.toFixed(2),\r\n        y: this.y.toFixed(2),\r\n        z: this.z.toFixed(2)\r\n      };\r\n    };\r\n    \r\n    PannerNode.prototype.toString = function() {\r\n      return this.id+\": PannerNode(\"+this.x.toFixed(2)+\r\n        \", \"+this.y.toFixed(2)+\", \"+this.z.toFixed(2)+\")\";\r\n    };\r\n    \r\n    PannerNode.random = function() {\r\n      var x = Utils.randomIn(-5.0, 5.0),\r\n          y = Utils.randomIn(-5.0, 5.0),\r\n          z = Utils.randomIn(-5.0, 5.0);\r\n    \r\n      return new PannerNode({\r\n        x:x,\r\n        y:y,\r\n        z:z\r\n      });\r\n    };\r\n    \r\n    __exports__[\"default\"] = PannerNode;\n  });","define(\"asNEAT/population\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    \r\n    var Utils = require('asNEAT/utils')['default'],\r\n        Network = require('asNEAT/network')['default'],\r\n        log = Utils.log,\r\n        name = \"Population\";\r\n    \r\n    /**\r\n      A collection of instruments\r\n    */\r\n    var Population = function(parameters) {\r\n      Utils.extend(this, this.defaultParameters, parameters);\r\n    };\r\n    \r\n    Population.prototype.name = name;\r\n    Population.prototype.defaultParameters = {\r\n      networks: [],\r\n      networkParameters: {},\r\n      numberOfMutationsPerGeneration: 1,\r\n      numberOfNewParentMutations: 3,\r\n      populationCount: 9,\r\n      crossoverRate: 0.3,\r\n      mutationRate: 1.0\r\n    };\r\n    \r\n    /*\r\n      Creates a deep clone of this Population\r\n     */\r\n    Population.prototype.clone = function() {\r\n      var clonedNetworks = [];\r\n      _.forEach(this.networks, function(network){\r\n        clonedNetworks.push(network.clone());\r\n      });\r\n      return new Population({\r\n        networks: clonedNetworks,\r\n        networkParameters: _.cloneDeep(this.networkParameters),\r\n        numberOfMutationsPerGeneration: this.numberOfMutationsPerGeneration,\r\n        numberOfNewParentMutations: this.numberOfNewParentMutations,\r\n        populationCount: this.populationCount,\r\n        crossoverRate: this.crossoverRate,\r\n        mutationRate: this.mutationRate\r\n      });\r\n    };\r\n    \r\n    Population.prototype.toString = function() {\r\n      var str = \"Networks[\"+this.networks.length+\"]:<br>\";\r\n      str+= \"crossoverRate: \"+this.crossoverRate+\"<br>\";\r\n      str+= \"mutationRate: \"+this.mutationRate+\"<br>\";\r\n      return str;\r\n    };\r\n    \r\n    Population.prototype.GenerateNewRandomParent = function() {\r\n      var newParent = new Network(this.networkParameters),\r\n          i, num;\r\n      for (i=0, num=this.numberOfNewParentMutations; i<num; ++i)\r\n        newParent.mutate();\r\n      return newParent;\r\n    };\r\n    \r\n    /**\r\n      @param parents an array of networks (can be empty)\r\n      @param params defaultParameters for the population\r\n      @return Population\r\n    */\r\n    Population.generateFromParents = function(parents, params) {\r\n      var newPopulation = new Population(params),\r\n          numMutations = newPopulation.numberOfMutationsPerGeneration,\r\n          networkParams = newPopulation.networkParameters,\r\n          hasAnyParents = parents.length > 0,\r\n          hasOnlyOneParent = parents.length === 1,\r\n          x, y, i, isCrossed, tempLastMutation;\r\n      while(newPopulation.networks.length < newPopulation.populationCount) {\r\n        isCrossed = false;\r\n    \r\n        if (hasAnyParents)\r\n          x = Utils.randomElementIn(parents);\r\n        else\r\n          x = newPopulation.GenerateNewRandomParent();\r\n    \r\n        if (Utils.randomChance(newPopulation.crossoverRate)) {\r\n          if (!hasAnyParents || hasOnlyOneParent)\r\n            y = newPopulation.GenerateNewRandomParent();\r\n          else\r\n            y = Utils.randomElementIn(parents, x);\r\n    \r\n          x = x.crossWith(y);\r\n          isCrossed = true;\r\n        }\r\n        \r\n        if (Utils.randomChance(newPopulation.mutationRate)) {\r\n          if (isCrossed)\r\n            tempLastMutation = x.lastMutation;\r\n    \r\n          x = x.clone();\r\n          for (i=0; i<numMutations; ++i)\r\n            x.mutate();\r\n    \r\n          if (isCrossed) {\r\n            x.lastMutation.objectsChanged = tempLastMutation.objectsChanged.concat(\r\n              x.lastMutation.objectsChanged);\r\n            x.lastMutation.changeDescription = tempLastMutation.changeDescription+\" & \"+\r\n              x.lastMutation.changeDescription;\r\n          }\r\n        }\r\n    \r\n        newPopulation.networks.push(x);\r\n      }\r\n      return newPopulation;\r\n    };\r\n    \r\n    __exports__[\"default\"] = Population;\n  });","define(\"asNEAT/utils\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    \r\n    var Utils = {};\r\n    \r\n    Utils.IS_DEBUG = true;\r\n    \r\n    Utils.log = function(msg) {\r\n      if (!Utils.IS_DEBUG) return;\r\n      \r\n      console.log(msg);\r\n      if (typeof $ !== \"undefined\")\r\n        $('.log').prepend('<div>'+msg+'</div>');\r\n    };\r\n    \r\n    Utils.error = function(msg) {\r\n      throw msg;\r\n    };\r\n    \r\n    Utils.upperCaseFirstLetter = function(str) {\r\n      return str.charAt(0).toUpperCase() + str.slice(1);\r\n    };\r\n    Utils.lowerCaseFirstLetter = function(str) {\r\n      return str.charAt(0).toLowerCase() + str.slice(1);\r\n    };\r\n    \r\n    Utils.random = function() {\r\n      return Math.random();\r\n    };\r\n    \r\n    /*\r\n      @params (min, max) or ({min, max})\r\n    */\r\n    Utils.randomIn = function(min, max) {\r\n      if (_.isObject(min)) {\r\n        max = min.max;\r\n        min = min.min;\r\n      }\r\n      return Math.random()*(max-min) + min;\r\n    };\r\n    \r\n    /*\r\n      @params (min, max) or ({min, max})\r\n      @param min\r\n      @param max up to but not including (aka, an array's length for finding\r\n                 an index)\r\n     */\r\n    Utils.randomIndexIn = function(min, max) {\r\n      if (_.isObject(min)) {\r\n        max = min.max;\r\n        min = min.min;\r\n      }\r\n      return Math.floor(Utils.randomIn(min, max));\r\n    };\r\n    \r\n    /*\r\n      @param chance {number} [0,1]\r\n      @return If a random number was generated less than the chance\r\n    */\r\n    Utils.randomChance = function(chance) {\r\n      return Utils.random() <= chance;\r\n    };\r\n    \r\n    Utils.randomBool = function() {\r\n      return !!Math.round(Math.random());\r\n    };\r\n    \r\n    /** \r\n      @param xs {array} [x1, x2,...]\r\n      @param notX An element in xs to not select\r\n      @return A random element in xs, undefined if xs is empty\r\n    */\r\n    Utils.randomElementIn = function(xs, notX) {\r\n      if (xs.length===0) return;\r\n      if (notX)\r\n        return Utils.randomElementIn(_.reject(xs, notX));\r\n    \r\n      var index = Utils.randomIndexIn(0, xs.length);\r\n      return xs[index];\r\n    };\r\n    \r\n    /**\r\n     * Clamps the given number to the min or max\r\n     * @param x \r\n     * @param min\r\n     * @param max\r\n     * @return A number in [min, max]\r\n     **/\r\n    Utils.clamp = function(x, min, max) {\r\n      if (x > max)\r\n        return max;\r\n      if (x < min)\r\n        return min;\r\n      return x;\r\n    };\r\n    \r\n    //+ Jonas Raoni Soares Silva\r\n    //@ http://jsfromhell.com/array/shuffle [rev. #1]\r\n    Utils.shuffle = function(v) {\r\n      for(var j, x, i = v.length; \r\n        i;\r\n        j = parseInt(Math.random() * i),\r\n          x = v[--i],\r\n          v[i] = v[j],\r\n          v[j] = x);\r\n      return v;\r\n    };\r\n    \r\n    /*\r\n      @param xs [{weight, element},...] with sum(weights)===1.0\r\n    */\r\n    Utils.weightedSelection = function(xs) {\r\n      var r = Math.random(),\r\n          sum = 0, element;\r\n      _.forEach(xs, function(x) {\r\n        sum+=x.weight;\r\n        if (r <= sum) {\r\n          element = x.element;\r\n          return false;\r\n        }\r\n      });\r\n      return element;\r\n    };\r\n    \r\n    /*\r\n      Mutates the given\r\n      @param params\r\n      @return {mutatedParameter, changeDescription}\r\n     */\r\n    Utils.mutateParameter = function(params, target) {\r\n      var delta, range, newParam;\r\n    \r\n      _.defaults(params, {\r\n        obj: null,\r\n        parameter: 'param',\r\n        \r\n        // Chance of mutating only by an amount in mutation delta\r\n        // (ie. weight+=mutationDelta), otherwise (weight=mutationRange)\r\n        mutationDeltaChance: 0.8,\r\n        mutationDelta: {min: -0.2, max: 0.2},\r\n    \r\n        mutateDelta: function() {\r\n          if (params.discreteMutation)\r\n            delta = Utils.randomIndexIn(params.mutationDelta);\r\n          else\r\n            delta = Utils.randomIn(params.mutationDelta);\r\n          Utils.log('mutating by delta '+delta.toFixed(3));\r\n          params.obj[params.parameter]+=delta;\r\n    \r\n          return {\r\n            mutatedParameter: params.parameter,\r\n            changeDescription: \"by delta \"+delta.toFixed(3)\r\n          };\r\n        },\r\n    \r\n        // note: the inverse is also possible (ex (-max, -min]) when\r\n        // allowInverse is true\r\n        randomMutationRange: {min: 0.1, max: 1.5},\r\n    \r\n        mutateRandom: function() {\r\n          range = params.randomMutationRange;\r\n          if (params.discreteMutation)\r\n            newParam = Utils.randomIndexIn(range);\r\n          else\r\n            newParam = Utils.randomIn(range);\r\n    \r\n          // 50% chance of negative\r\n          if (params.allowInverse && Utils.randomBool())\r\n            newParam*=-1;\r\n    \r\n          Utils.log('mutating with new param '+newParam);\r\n          params.obj[params.parameter] = newParam;\r\n          return {\r\n            mutatedParameter: params.parameter,\r\n            changeDescription: \"to \"+newParam\r\n          };\r\n        },\r\n    \r\n        allowInverse: true,\r\n        // true if only integers are allowed (ie for an index), otherwise\r\n        // uses floating point\r\n        discreteMutation: false\r\n      });\r\n    \r\n      Utils.log('mutating('+params.parameter+') '+params.obj);\r\n    \r\n      \r\n    \r\n      // Only change the weight by a given delta\r\n      if (Utils.randomChance(params.mutationDeltaChance))\r\n        return params.mutateDelta.call(target);\r\n      // Use a new random weight in range\r\n      else\r\n        return params.mutateRandom.call(target);\r\n    };\r\n    \r\n    /*\r\n      Generates a reversible unique number from two numbers\r\n    */\r\n    Utils.cantorPair = function(x, y) {\r\n      return ((x+y)*(x+y+1)) / 2 + y;\r\n    };\r\n    Utils.reverseCantorPair = function(z) {\r\n      var t = Math.floor((-1 + Math.sqrt(1+8*z))/2);\r\n      var x = t*(t+3)/2 - z;\r\n      var y = z - t*(t+1)/2;\r\n      return {x:x, y:y};\r\n    };\r\n    \r\n    /**\r\n      extend function that clones the default parameters\r\n      @param arguments\r\n    */\r\n    Utils.extend = function(self, defaultParameters, parameters) {\r\n      // deep clone the defaultParameters so [] and {} aren't referenced by\r\n      // multiple objects\r\n      _.assign(self, _.cloneDeep(defaultParameters), parameters);\r\n    };\r\n    \r\n    Utils.roundTo2Places = function(num) {\r\n      return +(Math.round(num + \"e+2\")  + \"e-2\");\r\n    };\r\n    \r\n    var TWELTH_ROOT = Math.pow(2,1/12);\r\n    var A4 = 440;\r\n    var DISTANCE_FROM_A = {\r\n      c:-9, d:-7, e:-5, f:-4, g:-2, a:0, b:2\r\n    };\r\n    /**\r\n      Gets the frequency based on an equal tempered scale\r\n      with A4 = 440\r\n      @param note (ex: 'c4', 'c4#', 'C4b')\r\n    */\r\n    Utils.frequencyForNote = function(note) {\r\n      var steps = Utils.stepsFromRootNote(note);\r\n      return Utils.frequencyOfStepsFromRootNote(steps);\r\n    };\r\n    \r\n    Utils.stepsFromRootNote = function(note) {\r\n      note = note.toLowerCase().split('');\r\n      var letter = note[0],\r\n          octave = parseInt(note[1], 10),\r\n          modifier = note[2],\r\n          steps = DISTANCE_FROM_A[letter];\r\n      if (modifier==='#')\r\n        ++steps;\r\n      else if (modifier==='b')\r\n        --steps;\r\n    \r\n      steps+= 12 * (octave-4);\r\n      return steps;\r\n    };\r\n    \r\n    Utils.noteForFrequency = function() {\r\n      // TODO: reverse frequencyForNote\r\n      // TODO: Tests for frequencyForNote(noteForFrequency(x))===x\r\n    };\r\n    \r\n    Utils.frequencyOfStepsFromRootNote = function(steps) {\r\n      return A4 * Math.pow(TWELTH_ROOT, steps);\r\n    };\r\n    \r\n    var HashLength = 6;\r\n    var HashCharacters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r\n    Utils.createHash = function(len, chars) {\r\n      if (typeof len === \"undefined\") len = HashLength;\r\n      if (typeof chars === \"undefined\") chars = HashCharacters;\r\n    \r\n      var i = 0, hash=[];\r\n      for (; i<len; ++i) {\r\n        hash.push(chars.charAt(\r\n          Math.floor(Math.random() * chars.length)));\r\n      }\r\n      return hash.join(\"\");\r\n    };\r\n    \r\n    __exports__[\"default\"] = Utils;\n  });"]}